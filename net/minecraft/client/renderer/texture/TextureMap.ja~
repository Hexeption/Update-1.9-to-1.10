package net.minecraft.client.renderer.texture;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.Map.Entry;
import javax.annotation.Nullable;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.StitcherException;
import net.minecraft.client.renderer.texture.AbstractTexture;
import net.minecraft.client.renderer.texture.ITextureMapPopulator;
import net.minecraft.client.renderer.texture.ITickableTextureObject;
import net.minecraft.client.renderer.texture.PngSizeInfo;
import net.minecraft.client.renderer.texture.Stitcher;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.renderer.texture.TextureUtil;
import net.minecraft.client.resources.IResource;
import net.minecraft.client.resources.IResourceManager;
import net.minecraft.crash.CrashReport;
import net.minecraft.crash.CrashReportCategory;
import net.minecraft.crash.ICrashReportDetail;
import net.minecraft.src.BetterGrass;
import net.minecraft.src.Config;
import net.minecraft.src.ConnectedTextures;
import net.minecraft.src.CustomItems;
import net.minecraft.src.Reflector;
import net.minecraft.src.ReflectorForge;
import net.minecraft.src.TextureUtils;
import net.minecraft.util.ReportedException;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.MathHelper;
import org.apache.commons.io.IOUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import shadersmod.client.ShadersTex;

public class TextureMap extends AbstractTexture implements ITickableTextureObject {
   private static final Logger field_147635_d = LogManager.getLogger();
   public static final ResourceLocation field_174945_f = new ResourceLocation("missingno");
   public static final ResourceLocation field_110575_b = new ResourceLocation("textures/atlas/blocks.png");
   private final List<TextureAtlasSprite> field_94258_i;
   private final Map<String, TextureAtlasSprite> field_110574_e;
   private final Map<String, TextureAtlasSprite> field_94252_e;
   private final String field_94254_c;
   private final ITextureMapPopulator field_174946_m;
   private int field_147636_j;
   private final TextureAtlasSprite field_94249_f;
   private TextureAtlasSprite[] iconGrid;
   private int iconGridSize;
   private int iconGridCountX;
   private int iconGridCountY;
   private double iconGridSizeU;
   private double iconGridSizeV;
   private static final boolean ENABLE_SKIP = Boolean.parseBoolean(System.getProperty("fml.skipFirstTextureLoad", "true"));
   private boolean skipFirst;
   public int atlasWidth;
   public int atlasHeight;

   public TextureMap(String p_i46099_1_) {
      this(p_i46099_1_, (ITextureMapPopulator)null);
   }

   public TextureMap(String p_i1_1_, boolean p_i1_2_) {
      this(p_i1_1_, (ITextureMapPopulator)null, p_i1_2_);
   }

   public TextureMap(String p_i46100_1_, @Nullable ITextureMapPopulator p_i46100_2_) {
      this(p_i46100_1_, p_i46100_2_, false);
   }

   public TextureMap(String p_i2_1_, ITextureMapPopulator p_i2_2_, boolean p_i2_3_) {
      this.iconGrid = null;
      this.iconGridSize = -1;
      this.iconGridCountX = -1;
      this.iconGridCountY = -1;
      this.iconGridSizeU = -1.0D;
      this.iconGridSizeV = -1.0D;
      this.skipFirst = false;
      this.atlasWidth = 0;
      this.atlasHeight = 0;
      this.field_94258_i = Lists.<TextureAtlasSprite>newArrayList();
      this.field_110574_e = Maps.<String, TextureAtlasSprite>newHashMap();
      this.field_94252_e = Maps.<String, TextureAtlasSprite>newHashMap();
      this.field_94249_f = new TextureAtlasSprite("missingno");
      this.field_94254_c = p_i2_1_;
      this.field_174946_m = p_i2_2_;
      this.skipFirst = p_i2_3_ && ENABLE_SKIP;
   }

   private void func_110569_e() {
      int i = this.getMinSpriteSize();
      int[] aint = this.getMissingImageData(i);
      this.field_94249_f.func_110966_b(i);
      this.field_94249_f.func_110969_c(i);
      int[][] aint1 = new int[this.field_147636_j + 1][];
      aint1[0] = aint;
      this.field_94249_f.func_110968_a(Lists.newArrayList(new int[][][]{aint1}));
      this.field_94249_f.setIndexInMap(0);
   }

   public void func_110551_a(IResourceManager p_110551_1_) throws IOException {
      ShadersTex.resManager = p_110551_1_;
      if(this.field_174946_m != null) {
         this.func_174943_a(p_110551_1_, this.field_174946_m);
      }

   }

   public void func_174943_a(IResourceManager p_174943_1_, ITextureMapPopulator p_174943_2_) {
      this.field_110574_e.clear();
      p_174943_2_.func_177059_a(this);
      if(this.field_147636_j >= 4) {
         this.field_147636_j = this.detectMaxMipmapLevel(this.field_110574_e, p_174943_1_);
         Config.log("Mipmap levels: " + this.field_147636_j);
      }

      this.func_110569_e();
      this.func_147631_c();
      this.func_110571_b(p_174943_1_);
   }

   public void func_110571_b(IResourceManager p_110571_1_) {
      ShadersTex.resManager = p_110571_1_;
      Config.dbg("Multitexture: " + Config.isMultiTexture());
      if(Config.isMultiTexture()) {
         for(TextureAtlasSprite textureatlassprite : this.field_94252_e.values()) {
            textureatlassprite.deleteSpriteTexture();
         }
      }

      ConnectedTextures.updateIcons(this);
      CustomItems.updateIcons(this);
      BetterGrass.updateIcons(this);
      int j1 = Minecraft.func_71369_N();
      Stitcher stitcher = new Stitcher(j1, j1, 0, this.field_147636_j);
      this.field_94252_e.clear();
      this.field_94258_i.clear();
      int i = Integer.MAX_VALUE;
      Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPre, new Object[]{this});
      int j = this.getMinSpriteSize();
      this.iconGridSize = j;
      int k = 1 << this.field_147636_j;

      for(Entry<String, TextureAtlasSprite> entry : this.field_110574_e.entrySet()) {
         if(this.skipFirst) {
            break;
         }

         TextureAtlasSprite textureatlassprite1 = (TextureAtlasSprite)entry.getValue();
         ResourceLocation resourcelocation = this.func_184396_a(textureatlassprite1);
         IResource iresource = null;
         if(textureatlassprite1.hasCustomLoader(p_110571_1_, resourcelocation)) {
            if(textureatlassprite1.load(p_110571_1_, resourcelocation)) {
               Config.dbg("Custom loader (skipped): " + textureatlassprite1);
               continue;
            }

            Config.dbg("Custom loader: " + textureatlassprite1);
         } else {
            try {
               PngSizeInfo pngsizeinfo = PngSizeInfo.func_188532_a(p_110571_1_.func_110536_a(resourcelocation));
               if(Config.isShaders()) {
                  iresource = ShadersTex.loadResource(p_110571_1_, resourcelocation);
               } else {
                  iresource = p_110571_1_.func_110536_a(resourcelocation);
               }

               boolean flag = iresource.func_110526_a("animation") != null;
               textureatlassprite1.func_188538_a(pngsizeinfo, flag);
            } catch (RuntimeException runtimeexception) {
               field_147635_d.error("Unable to parse metadata from {}", new Object[]{resourcelocation, runtimeexception});
               ReflectorForge.FMLClientHandler_trackBrokenTexture(resourcelocation, runtimeexception.getMessage());
               continue;
            } catch (IOException ioexception) {
               field_147635_d.error("Using missing texture, unable to load " + resourcelocation + ", " + ioexception.getClass().getName());
               ReflectorForge.FMLClientHandler_trackMissingTexture(resourcelocation);
               continue;
            } finally {
               IOUtils.closeQuietly((Closeable)iresource);
            }
         }

         int k2 = textureatlassprite1.func_94211_a();
         int l2 = textureatlassprite1.func_94216_b();
         if(k2 >= 1 && l2 >= 1) {
            if(k2 < j || this.field_147636_j > 0) {
               int l = this.field_147636_j > 0?TextureUtils.scaleToPowerOfTwo(k2, j):TextureUtils.scaleMinTo(k2, j);
               if(l != k2) {
                  if(!TextureUtils.isPowerOfTwo(k2)) {
                     Config.log("Scaled non power of 2: " + textureatlassprite1.func_94215_i() + ", " + k2 + " -> " + l);
                  } else {
                     Config.log("Scaled too small texture: " + textureatlassprite1.func_94215_i() + ", " + k2 + " -> " + l);
                  }

                  int i1 = l2 * l / k2;
                  textureatlassprite1.func_110966_b(l);
                  textureatlassprite1.func_110969_c(i1);
               }
            }

            i = Math.min(i, Math.min(textureatlassprite1.func_94211_a(), textureatlassprite1.func_94216_b()));
            int i3 = Math.min(Integer.lowestOneBit(textureatlassprite1.func_94211_a()), Integer.lowestOneBit(textureatlassprite1.func_94216_b()));
            if(i3 < k) {
               field_147635_d.warn("Texture {} with size {}x{} limits mip level from {} to {}", new Object[]{resourcelocation, Integer.valueOf(textureatlassprite1.func_94211_a()), Integer.valueOf(textureatlassprite1.func_94216_b()), Integer.valueOf(MathHelper.func_151239_c(k)), Integer.valueOf(MathHelper.func_151239_c(i3))});
               k = i3;
            }

            stitcher.func_110934_a(textureatlassprite1);
         } else {
            Config.warn("Invalid sprite size: " + textureatlassprite1);
         }
      }

      int k1 = Math.min(i, k);
      int l1 = MathHelper.func_151239_c(k1);
      if(l1 < 0) {
         l1 = 0;
      }

      if(l1 < this.field_147636_j) {
         field_147635_d.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", new Object[]{this.field_94254_c, Integer.valueOf(this.field_147636_j), Integer.valueOf(l1), Integer.valueOf(k1)});
         this.field_147636_j = l1;
      }

      this.field_94249_f.func_147963_d(this.field_147636_j);
      stitcher.func_110934_a(this.field_94249_f);
      this.skipFirst = false;

      try {
         stitcher.func_94305_f();
      } catch (StitcherException stitcherexception) {
         throw stitcherexception;
      }

      field_147635_d.info("Created: {}x{} {}-atlas", new Object[]{Integer.valueOf(stitcher.func_110935_a()), Integer.valueOf(stitcher.func_110936_b()), this.field_94254_c});
      if(Config.isShaders()) {
         ShadersTex.allocateTextureMap(this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b(), stitcher, this);
      } else {
         TextureUtil.func_180600_a(this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b());
      }

      Map<String, TextureAtlasSprite> map = Maps.<String, TextureAtlasSprite>newHashMap(this.field_110574_e);

      for(TextureAtlasSprite textureatlassprite2 : stitcher.func_94309_g()) {
         if(Config.isShaders()) {
            ShadersTex.setIconName(ShadersTex.setSprite(textureatlassprite2).func_94215_i());
         }

         if(textureatlassprite2 == this.field_94249_f || this.func_184397_a(p_110571_1_, textureatlassprite2)) {
            String s = textureatlassprite2.func_94215_i();
            map.remove(s);
            this.field_94252_e.put(s, textureatlassprite2);

            try {
               if(Config.isShaders()) {
                  ShadersTex.uploadTexSubForLoadAtlas(textureatlassprite2.func_147965_a(0), textureatlassprite2.func_94211_a(), textureatlassprite2.func_94216_b(), textureatlassprite2.func_130010_a(), textureatlassprite2.func_110967_i(), false, false);
               } else {
                  TextureUtil.func_147955_a(textureatlassprite2.func_147965_a(0), textureatlassprite2.func_94211_a(), textureatlassprite2.func_94216_b(), textureatlassprite2.func_130010_a(), textureatlassprite2.func_110967_i(), false, false);
               }
            } catch (Throwable throwable) {
               CrashReport crashreport = CrashReport.func_85055_a(throwable, "Stitching texture atlas");
               CrashReportCategory crashreportcategory = crashreport.func_85058_a("Texture being stitched together");
               crashreportcategory.func_71507_a("Atlas path", this.field_94254_c);
               crashreportcategory.func_71507_a("Sprite", textureatlassprite2);
               throw new ReportedException(crashreport);
            }

            if(textureatlassprite2.func_130098_m()) {
               this.field_94258_i.add(textureatlassprite2);
            }
         }
      }

      for(TextureAtlasSprite textureatlassprite3 : map.values()) {
         textureatlassprite3.func_94217_a(this.field_94249_f);
      }

      if(Config.isMultiTexture()) {
         int i2 = stitcher.func_110935_a();
         int j2 = stitcher.func_110936_b();

         for(TextureAtlasSprite textureatlassprite4 : stitcher.func_94309_g()) {
            textureatlassprite4.sheetWidth = i2;
            textureatlassprite4.sheetHeight = j2;
            textureatlassprite4.mipmapLevels = this.field_147636_j;
            TextureAtlasSprite textureatlassprite5 = textureatlassprite4.spriteSingle;
            if(textureatlassprite5 != null) {
               if(textureatlassprite5.func_94211_a() <= 0) {
                  textureatlassprite5.func_110966_b(textureatlassprite4.func_94211_a());
                  textureatlassprite5.func_110969_c(textureatlassprite4.func_94216_b());
                  textureatlassprite5.func_110971_a(textureatlassprite4.func_94211_a(), textureatlassprite4.func_94216_b(), 0, 0, false);
                  textureatlassprite5.func_130103_l();
                  List<int[][]> list = textureatlassprite4.getFramesTextureData();
                  textureatlassprite5.func_110968_a(list);
                  textureatlassprite5.setAnimationMetadata(textureatlassprite4.getAnimationMetadata());
               }

               textureatlassprite5.sheetWidth = i2;
               textureatlassprite5.sheetHeight = j2;
               textureatlassprite5.mipmapLevels = this.field_147636_j;
               textureatlassprite4.bindSpriteTexture();
               boolean flag2 = false;
               boolean flag1 = true;

               try {
                  TextureUtil.func_147955_a(textureatlassprite5.func_147965_a(0), textureatlassprite5.func_94211_a(), textureatlassprite5.func_94216_b(), textureatlassprite5.func_130010_a(), textureatlassprite5.func_110967_i(), flag2, flag1);
               } catch (Exception exception) {
                  Config.dbg("Error uploading sprite single: " + textureatlassprite5 + ", parent: " + textureatlassprite4);
                  exception.printStackTrace();
               }
            }
         }

         Config.getMinecraft().func_110434_K().func_110577_a(field_110575_b);
      }

      Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPost, new Object[]{this});
      this.updateIconGrid(stitcher.func_110935_a(), stitcher.func_110936_b());
      if(Config.equals(System.getProperty("saveTextureMap"), "true")) {
         Config.dbg("Exporting texture map: " + this.field_94254_c);
         TextureUtils.saveGlTexture("debug/" + this.field_94254_c.replaceAll("/", "_"), this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b());
      }

   }

   private boolean func_184397_a(IResourceManager p_184397_1_, final TextureAtlasSprite p_184397_2_) {
      ResourceLocation resourcelocation = this.func_184396_a(p_184397_2_);
      IResource iresource = null;
      if(p_184397_2_.hasCustomLoader(p_184397_1_, resourcelocation)) {
         TextureUtils.generateCustomMipmaps(p_184397_2_, this.field_147636_j);
      } else {
         label29: {
            boolean flag1;
            try {
               iresource = p_184397_1_.func_110536_a(resourcelocation);
               p_184397_2_.func_188539_a(iresource, this.field_147636_j + 1);
               break label29;
            } catch (RuntimeException runtimeexception1) {
               field_147635_d.error("Unable to parse metadata from {}", new Object[]{resourcelocation, runtimeexception1});
               flag1 = false;
            } catch (IOException ioexception) {
               field_147635_d.error("Using missing texture, unable to load {}", new Object[]{resourcelocation, ioexception});
               flag1 = false;
               boolean crashreportcategory = flag1;
               return crashreportcategory;
            } finally {
               IOUtils.closeQuietly((Closeable)iresource);
            }

            return flag1;
         }
      }

      try {
         p_184397_2_.func_147963_d(this.field_147636_j);
         return true;
      } catch (Throwable throwable) {
         CrashReport crashreport = CrashReport.func_85055_a(throwable, "Applying mipmap");
         CrashReportCategory crashreportcategory = crashreport.func_85058_a("Sprite being mipmapped");
         crashreportcategory.func_189529_a("Sprite name", new ICrashReportDetail<String>() {
            public String call() throws Exception {
               return p_184397_2_.func_94215_i();
            }
         });
         crashreportcategory.func_189529_a("Sprite size", new ICrashReportDetail<String>() {
            public String call() throws Exception {
               return p_184397_2_.func_94211_a() + " x " + p_184397_2_.func_94216_b();
            }
         });
         crashreportcategory.func_189529_a("Sprite frames", new ICrashReportDetail<String>() {
            public String call() throws Exception {
               return p_184397_2_.func_110970_k() + " frames";
            }
         });
         crashreportcategory.func_71507_a("Mipmap levels", Integer.valueOf(this.field_147636_j));
         throw new ReportedException(crashreport);
      }
   }

   public ResourceLocation func_184396_a(TextureAtlasSprite p_184396_1_) {
      ResourceLocation resourcelocation = new ResourceLocation(p_184396_1_.func_94215_i());
      return this.completeResourceLocation(resourcelocation);
   }

   public ResourceLocation completeResourceLocation(ResourceLocation p_completeResourceLocation_1_) {
      return this.isAbsoluteLocation(p_completeResourceLocation_1_)?new ResourceLocation(p_completeResourceLocation_1_.func_110624_b(), p_completeResourceLocation_1_.func_110623_a() + ".png"):new ResourceLocation(p_completeResourceLocation_1_.func_110624_b(), String.format("%s/%s%s", new Object[]{this.field_94254_c, p_completeResourceLocation_1_.func_110623_a(), ".png"}));
   }

   public TextureAtlasSprite func_110572_b(String p_110572_1_) {
      TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.field_94252_e.get(p_110572_1_);
      if(textureatlassprite == null) {
         textureatlassprite = this.field_94249_f;
      }

      return textureatlassprite;
   }

   public void func_94248_c() {
      if(Config.isShaders()) {
         ShadersTex.updatingTex = this.getMultiTexID();
      }

      TextureUtil.func_94277_a(this.func_110552_b());

      for(TextureAtlasSprite textureatlassprite : this.field_94258_i) {
         if(this.isTerrainAnimationActive(textureatlassprite)) {
            textureatlassprite.func_94219_l();
         }
      }

      if(Config.isMultiTexture()) {
         for(TextureAtlasSprite textureatlassprite2 : this.field_94258_i) {
            if(this.isTerrainAnimationActive(textureatlassprite2)) {
               TextureAtlasSprite textureatlassprite1 = textureatlassprite2.spriteSingle;
               if(textureatlassprite1 != null) {
                  if(textureatlassprite2 == TextureUtils.iconClock || textureatlassprite2 == TextureUtils.iconCompass) {
                     textureatlassprite1.field_110973_g = textureatlassprite2.field_110973_g;
                  }

                  textureatlassprite2.bindSpriteTexture();
                  textureatlassprite1.func_94219_l();
               }
            }
         }

         TextureUtil.func_94277_a(this.func_110552_b());
      }

      if(Config.isShaders()) {
         ShadersTex.updatingTex = null;
      }

   }

   public TextureAtlasSprite func_174942_a(ResourceLocation p_174942_1_) {
      if(p_174942_1_ == null) {
         throw new IllegalArgumentException("Location cannot be null!");
      } else {
         TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.field_110574_e.get(p_174942_1_.toString());
         if(textureatlassprite == null) {
            textureatlassprite = TextureAtlasSprite.func_176604_a(p_174942_1_);
            this.field_110574_e.put(p_174942_1_.toString(), textureatlassprite);
            if(textureatlassprite instanceof TextureAtlasSprite && textureatlassprite.getIndexInMap() < 0) {
               textureatlassprite.setIndexInMap(this.field_110574_e.size());
            }
         }

         return textureatlassprite;
      }
   }

   public void func_110550_d() {
      this.func_94248_c();
   }

   public void func_147633_a(int p_147633_1_) {
      this.field_147636_j = p_147633_1_;
   }

   public TextureAtlasSprite func_174944_f() {
      return this.field_94249_f;
   }

   public TextureAtlasSprite getTextureExtry(String p_getTextureExtry_1_) {
      ResourceLocation resourcelocation = new ResourceLocation(p_getTextureExtry_1_);
      return (TextureAtlasSprite)this.field_110574_e.get(resourcelocation.toString());
   }

   public boolean setTextureEntry(String p_setTextureEntry_1_, TextureAtlasSprite p_setTextureEntry_2_) {
      if(!this.field_110574_e.containsKey(p_setTextureEntry_1_)) {
         this.field_110574_e.put(p_setTextureEntry_1_, p_setTextureEntry_2_);
         if(p_setTextureEntry_2_.getIndexInMap() < 0) {
            p_setTextureEntry_2_.setIndexInMap(this.field_110574_e.size());
         }

         return true;
      } else {
         return false;
      }
   }

   private boolean isAbsoluteLocation(ResourceLocation p_isAbsoluteLocation_1_) {
      String s = p_isAbsoluteLocation_1_.func_110623_a();
      return this.isAbsoluteLocationPath(s);
   }

   private boolean isAbsoluteLocationPath(String p_isAbsoluteLocationPath_1_) {
      String s = p_isAbsoluteLocationPath_1_.toLowerCase();
      return s.startsWith("mcpatcher/") || s.startsWith("optifine/");
   }

   public TextureAtlasSprite getSpriteSafe(String p_getSpriteSafe_1_) {
      ResourceLocation resourcelocation = new ResourceLocation(p_getSpriteSafe_1_);
      return (TextureAtlasSprite)this.field_110574_e.get(resourcelocation.toString());
   }

   private boolean isTerrainAnimationActive(TextureAtlasSprite p_isTerrainAnimationActive_1_) {
      return p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterFlow?(p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaFlow?(p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer0 && p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer1?(p_isTerrainAnimationActive_1_ == TextureUtils.iconPortal?Config.isAnimatedPortal():(p_isTerrainAnimationActive_1_ != TextureUtils.iconClock && p_isTerrainAnimationActive_1_ != TextureUtils.iconCompass?Config.isAnimatedTerrain():true)):Config.isAnimatedFire()):Config.isAnimatedLava()):Config.isAnimatedWater();
   }

   public int getCountRegisteredSprites() {
      return this.field_110574_e.size();
   }

   private int detectMaxMipmapLevel(Map p_detectMaxMipmapLevel_1_, IResourceManager p_detectMaxMipmapLevel_2_) {
      int i = this.detectMinimumSpriteSize(p_detectMaxMipmapLevel_1_, p_detectMaxMipmapLevel_2_, 20);
      if(i < 16) {
         i = 16;
      }

      i = MathHelper.func_151236_b(i);
      if(i > 16) {
         Config.log("Sprite size: " + i);
      }

      int j = MathHelper.func_151239_c(i);
      if(j < 4) {
         j = 4;
      }

      return j;
   }

   private int detectMinimumSpriteSize(Map p_detectMinimumSpriteSize_1_, IResourceManager p_detectMinimumSpriteSize_2_, int p_detectMinimumSpriteSize_3_) {
      Map map = new HashMap();

      for(Entry entry : p_detectMinimumSpriteSize_1_.entrySet()) {
         TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)entry.getValue();
         ResourceLocation resourcelocation = new ResourceLocation(textureatlassprite.func_94215_i());
         ResourceLocation resourcelocation1 = this.completeResourceLocation(resourcelocation);
         if(!textureatlassprite.hasCustomLoader(p_detectMinimumSpriteSize_2_, resourcelocation)) {
            try {
               IResource iresource = p_detectMinimumSpriteSize_2_.func_110536_a(resourcelocation1);
               if(iresource != null) {
                  InputStream inputstream = iresource.func_110527_b();
                  if(inputstream != null) {
                     Dimension dimension = TextureUtils.getImageSize(inputstream, "png");
                     if(dimension != null) {
                        int i = dimension.width;
                        int j = MathHelper.func_151236_b(i);
                        if(!map.containsKey(Integer.valueOf(j))) {
                           map.put(Integer.valueOf(j), Integer.valueOf(1));
                        } else {
                           int k = ((Integer)map.get(Integer.valueOf(j))).intValue();
                           map.put(Integer.valueOf(j), Integer.valueOf(k + 1));
                        }
                     }
                  }
               }
            } catch (Exception var17) {
               ;
            }
         }
      }

      int l = 0;
      Set set = map.keySet();
      Set set1 = new TreeSet(set);

      int l1;
      for(Iterator iterator = set1.iterator(); iterator.hasNext(); l += l1) {
         int j1 = ((Integer)iterator.next()).intValue();
         l1 = ((Integer)map.get(Integer.valueOf(j1))).intValue();
      }

      int i1 = 16;
      int k1 = 0;
      l1 = l * p_detectMinimumSpriteSize_3_ / 100;
      Iterator iterator1 = set1.iterator();

      while(iterator1.hasNext()) {
         int i2 = ((Integer)iterator1.next()).intValue();
         int j2 = ((Integer)map.get(Integer.valueOf(i2))).intValue();
         k1 += j2;
         if(i2 > i1) {
            i1 = i2;
         }

         if(k1 > l1) {
            return i1;
         }
      }

      return i1;
   }

   private int getMinSpriteSize() {
      int i = 1 << this.field_147636_j;
      if(i < 8) {
         i = 8;
      }

      return i;
   }

   private int[] getMissingImageData(int p_getMissingImageData_1_) {
      BufferedImage bufferedimage = new BufferedImage(16, 16, 2);
      bufferedimage.setRGB(0, 0, 16, 16, TextureUtil.field_110999_b, 0, 16);
      BufferedImage bufferedimage1 = TextureUtils.scaleToPowerOfTwo(bufferedimage, p_getMissingImageData_1_);
      int[] aint = new int[p_getMissingImageData_1_ * p_getMissingImageData_1_];
      bufferedimage1.getRGB(0, 0, p_getMissingImageData_1_, p_getMissingImageData_1_, aint, 0, p_getMissingImageData_1_);
      return aint;
   }

   public boolean isTextureBound() {
      int i = GlStateManager.getBoundTexture();
      int j = this.func_110552_b();
      return i == j;
   }

   private void updateIconGrid(int p_updateIconGrid_1_, int p_updateIconGrid_2_) {
      this.iconGridCountX = -1;
      this.iconGridCountY = -1;
      this.iconGrid = null;
      if(this.iconGridSize > 0) {
         this.iconGridCountX = p_updateIconGrid_1_ / this.iconGridSize;
         this.iconGridCountY = p_updateIconGrid_2_ / this.iconGridSize;
         this.iconGrid = new TextureAtlasSprite[this.iconGridCountX * this.iconGridCountY];
         this.iconGridSizeU = 1.0D / (double)this.iconGridCountX;
         this.iconGridSizeV = 1.0D / (double)this.iconGridCountY;

         for(TextureAtlasSprite textureatlassprite : this.field_94252_e.values()) {
            double d0 = 0.5D / (double)p_updateIconGrid_1_;
            double d1 = 0.5D / (double)p_updateIconGrid_2_;
            double d2 = (double)Math.min(textureatlassprite.func_94209_e(), textureatlassprite.func_94212_f()) + d0;
            double d3 = (double)Math.min(textureatlassprite.func_94206_g(), textureatlassprite.func_94210_h()) + d1;
            double d4 = (double)Math.max(textureatlassprite.func_94209_e(), textureatlassprite.func_94212_f()) - d0;
            double d5 = (double)Math.max(textureatlassprite.func_94206_g(), textureatlassprite.func_94210_h()) - d1;
            int i = (int)(d2 / this.iconGridSizeU);
            int j = (int)(d3 / this.iconGridSizeV);
            int k = (int)(d4 / this.iconGridSizeU);
            int l = (int)(d5 / this.iconGridSizeV);

            for(int i1 = i; i1 <= k; ++i1) {
               if(i1 >= 0 && i1 < this.iconGridCountX) {
                  for(int j1 = j; j1 <= l; ++j1) {
                     if(j1 >= 0 && j1 < this.iconGridCountX) {
                        int k1 = j1 * this.iconGridCountX + i1;
                        this.iconGrid[k1] = textureatlassprite;
                     } else {
                        Config.warn("Invalid grid V: " + j1 + ", icon: " + textureatlassprite.func_94215_i());
                     }
                  }
               } else {
                  Config.warn("Invalid grid U: " + i1 + ", icon: " + textureatlassprite.func_94215_i());
               }
            }
         }

      }
   }

   public TextureAtlasSprite getIconByUV(double p_getIconByUV_1_, double p_getIconByUV_3_) {
      if(this.iconGrid == null) {
         return null;
      } else {
         int i = (int)(p_getIconByUV_1_ / this.iconGridSizeU);
         int j = (int)(p_getIconByUV_3_ / this.iconGridSizeV);
         int k = j * this.iconGridCountX + i;
         return k >= 0 && k <= this.iconGrid.length?this.iconGrid[k]:null;
      }
   }
}
